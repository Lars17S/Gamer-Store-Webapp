import axios, { AxiosResponse } from "axios";
import React, { useEffect } from "react";
import styled from "styled-components";
import { popularProducts } from "../data";
import Product from "./Product";

const Container = styled.div`
  padding: 20px;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
`;
// interface IFilters {
//   color?: string;
//   type?: string;
// }

// interface ProductsProps {
//   cat: string;
//   filters: IFilters;
//   sort: string;
// }

// interface IProduct {
//   title: string;
//   description: string;
//   image: string;
//   categories: string[];
//   type: string;
//   color: string;
//   price: number;
//   inStock: boolean;
// }

const Products = ({ cat, filters, sort }) => {
  console.log(cat, filters, sort);
  const [products, setProducts] = React.useState([]);
  const [filteredProducts, setFilteredProducts] = React.useState([]);

  useEffect(() => {
    const getProducts = async () => {
      try {
        const res = await axios.get(
          cat
            ? `http://localhost:5002/api/products?category=${cat}`
            : "http://localhost:5002/api/products"
        );
        console.log(res.data);
        setProducts(res.data);
      } catch (err) {
        console.log(err);
      }
    };
    getProducts();
  }, [cat]);

  useEffect(() => {
    cat &&
      setFilteredProducts(
        products.filter((item) => {
          return Object.entries(filters).every(([key, value]) =>
            item[key].includes(value)
          );
        })
      );
    cat &&
      setFilteredProducts(
        products.filter((item) => item.categories.includes("pc-parts"))
      );
    setFilteredProducts(
      products.filter((item) => {
        if (filters.color !== undefined && filters.type !== undefined) {
          return item.color === filters.color && item.type === filters.type;
        }
        if (filters.color !== undefined && filters.type === undefined) {
          return item.color === filters.color;
        }
        if (filters.color === undefined && filters.type !== undefined) {
          return item.type === filters.type;
        }
        return item;
      })
    );
  }, [products, cat, filters]);
  // console.log("REND: " + products.values);
  return (
    <Container>
      {filteredProducts.map((item) => (
        <Product id={item.id} img={item.img} key={item.id} />
      ))}
    </Container>
  );
};

export default Products;
